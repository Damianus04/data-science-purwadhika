- Interpreter programming language -> program akan langsung mengeksekusi setiap baris kode dari atas ke bawah
- case sensitive -> "A" beda dengan "a"
- tidak butuh semicolon
- Tabulasi - indentasi


Materi Exam Modul 1
- mengkonversi persamaan matematika dalam algoritma dengan variabel


MONGODB

--> Install MongoDB for community
1. buat folder baru dulu di C --> data\db
2. cmd pertama - server: C:\Program Files\MongoDB\Server\4.4\bin>mongod --dbpath C:\data\db
3. cmd kedua - execution: C:\Program Files\MongoDB\Server\4.4\bin>mongo

show database
- show dbs

use/create database
- use database_name

delete database
- use database_name
- db.dropDatabase()

show collections
- show collections

create collections
- db.createCollections('karyawan')

show data on collections
-db.Aset.find()

-> with condition
db.Employee.find({'Usia': 25})
db.Employee.find({'Gaji': 20000000}).pretty()

-> conditional
db.Employee.find({$and: [{}, {}]})
--> db.Employee.find({$and: [{"Nama": "Rosi"}, {"Gaji": 15000000}]})
--> db.Employee.find({$or: [{"Nama": "Joni"}, {"Kota": "Jakarta"}]})
--> db.Employee.find({"Usia": {$lt: 26}}) --> less than
--> db.Employee.find({"Usia": {$gt: 26}}) --> greater than
--> lte: less than equal, gte: greater than equal
--> db.Employee.find().limit(4).skip(3)

-> sort
--> db.Employee.find().sort({"Gaji": 1}) --> ascending
--> db.Employee.find().sort({"Gaji": -1}) --> descending

-> count
--> db.Employee.find().count()
--> db.Employee.find({"Nama": "Andre"}).count()

add data to Collections
db.Employee.insert([
... {"Nama": "Yogi", "Usia": 30, "Kota": "Malang", "Gaji": 16000000},
... {"Nama": "Cecil", "Usia": 26, "Kota": "Bandung", "Gaji": 15000000},
... {"Nama": "Andre", "Usia": 27, "Kota": "Jakarta", "Gaji": 17000000},
... {"Nama": "Andi", "Usia": 28, "Kota": "Bandung", "Gaji": 25000000}
... ])
--> if single data, [] not used

update data value in Collections
- update all --> db.Employee.update({}, {$set: {"Dept": "Data"})
- update per item --> db.Employee.update({"Nama": "Mike"}, {$set: {"Usia": 25} })

update data key in Collections
- update all --> db.Employee.updateMany({}, {$set: {"Dept": "Data"}})
	     --> db.Employee.updateMany({}, {$rename: {"Dept": "Divisi"}})
- update per item --> db.Employee.update({"Nama": "Mike"}, {$rename: {"Usia": "Umur"}})

update data based on certain query
- db.Employee.updateMany({'Nama': 'Rosi'}, {$rename: {"Usia": "Umur"}}

remove data
-  db.Aset.remove({"nama": "brankas"})db.

remove data key and value
- db.Employee.update({"Nama": "Mike"}, {$unset: {"Umur": true}})

import new data
- C:\Program Files\MongoDB\Tools\100\bin>mongoimport --db Culinary --collection restaurants --file restaurants.json
- make sure the .json file is copied to the directory

create user
1. go to one of db and collection
2. > db.createUser({
... 'user': 'AdministratorDB',
... 'pwd': 'Admin123',
... 'roles': ['dbAdmin', 'readWrite']
... })

3. show users or db.getUsers to show the information


MongoDB exercise: 
1) https://www.w3resource.com/mongodb-exercises/

2) versi >4.4 install mongodb tools (https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools)

3) masuk ke hasil instalasi (C:\Program Files\MongoDB\Tools\100\bin>mongoimport --db NamaDBS --collection DataRESTO --file restaurants.json
{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}


MySQL
Client - 3 alternatif
1. melalui GUI
2. melalui mySQL command line client
3. melalui command prompt

--> melalui command prompt
	- cd C:\Program Files\MySQL\MySQL Server 8.0\bin
	- --> mysql -u damianus -p

Reconnect localhost
1. Win+R
2. run services.msc
3. find MySQL 80 
4. click start


FINAL PROJECT:
1. Problem
2. Goals
3. Perusahaan - user
4. Data
5. Past Projects
	- Credit Scoring - SBA Loan Default Prediction
	- Sentiment Analysis - Twitter
	- Income Prediction
	- New Credit Card Application Prediction
	- Employee Turn-Over
	- Salary Prediction - NBA Salary Prediction
	- Heart Disease Prediction
	- Restaurant Recommendation


EVALUATION METRICS
- Linear Regression
	- persamaan garis y = ax + b
	- trend garis akan mendekati data prediksi jika a dan b
	  memiliki angka yang mendekati sempurna
	- kombinasi loss curve a dan b menghasilkan parabola 3D
	- untuk mencari a dan b, maka digunakan loss optimizer
	- ada dua jenis -> gradient & non-gradient descent

	- dengan teknik gradient descent, a dan b dapat dicari dengan
	  mencari titik paling rendah (menuruni bukit)
	- di linear regression, bukit cuma satu

- Polynomial Regression
	- menambahkan kuadrat untuk membuat garis/prediksi berlekuk
	- pangkat 1: lurus, pangkat 2: lengkung,
	  pangkat 3 dst: mulai berlekuk/bergelombang

- Bias-Variance Tradeoff
	- Bias = Loss = Error
	- Variance = variasi lekukan garis/prediksi
	- More complex model (high variance) ->prone to overfit (low bias)
	  More simple model(low variance) -> prone to underfit (high bias)
	- tidak ada yang high variance dan high bias dan
	  tidak ada yang low variance dan low bias
	  jika ada maka model itu sudah pasti salah dan 
	  lebih jelek dari nilai rata2
	- model yang ideal adalah medium variance dan medium bias


FINAL PROJECTS
1. Statistics

- Standard Deviation - untuk menunjukkan keragaman data
- Variance -> pangkat 2 dari standard deviation
- Mean, Median, Quartile formula
  - quartile -> pertama tahu nilai tengah dulu (median) setelah diurutkan
	- 
- Boxplot -> 1.5 IQR
	- model2 boxplot
	- IQR: Q3-Q1 (nilai tengah antara median dan nilai maksimum)

- Correlation - mengetahui hubungan dari dua variable.
  1. korelasi range nya antara -1 sampai 1, korelasi itu kuat
     (mendekati 1/-1) dan lemah (mendekati 0)
  2. korelasi positif mendekati 1, korelasi negatif mendekati -1
- korelasi ada - Pearson dan Spearman

2. Business understanding & Machine learning

3. Final Projects Concept
	- Vitamin - to boost the performance - to improve/optimize
	- Medicine - to cure the illness - to solve problem
4. Modul 2's question
	- beda std numpy dan pandas
	
	
