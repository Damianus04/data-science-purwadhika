- Interpreter programming language -> program akan langsung mengeksekusi setiap baris kode dari atas ke bawah
- case sensitive -> "A" beda dengan "a"
- tidak butuh semicolon
- Tabulasi - indentasi


Materi Exam Modul 1
- mengkonversi persamaan matematika dalam algoritma dengan variabel


MONGODB

--> Install MongoDB for community
1. buat folder baru dulu di C --> data\db
2. cmd pertama - server: C:\Program Files\MongoDB\Server\4.4\bin>mongod --dbpath C:\data\db
3. cmd kedua - execution: C:\Program Files\MongoDB\Server\4.4\bin>mongo

show database
- show dbs

use/create database
- use database_name

delete database
- use database_name
- db.dropDatabase()

show collections
- show collections

create collections
- db.createCollections('karyawan')

show data on collections
-db.Aset.find()

-> with condition
db.Employee.find({'Usia': 25})
db.Employee.find({'Gaji': 20000000}).pretty()

-> conditional
db.Employee.find({$and: [{}, {}]})
--> db.Employee.find({$and: [{"Nama": "Rosi"}, {"Gaji": 15000000}]})
--> db.Employee.find({$or: [{"Nama": "Joni"}, {"Kota": "Jakarta"}]})
--> db.Employee.find({"Usia": {$lt: 26}}) --> less than
--> db.Employee.find({"Usia": {$gt: 26}}) --> greater than
--> lte: less than equal, gte: greater than equal
--> db.Employee.find().limit(4).skip(3)

-> sort
--> db.Employee.find().sort({"Gaji": 1}) --> ascending
--> db.Employee.find().sort({"Gaji": -1}) --> descending

-> count
--> db.Employee.find().count()
--> db.Employee.find({"Nama": "Andre"}).count()

add data to Collections
db.Employee.insert([
... {"Nama": "Yogi", "Usia": 30, "Kota": "Malang", "Gaji": 16000000},
... {"Nama": "Cecil", "Usia": 26, "Kota": "Bandung", "Gaji": 15000000},
... {"Nama": "Andre", "Usia": 27, "Kota": "Jakarta", "Gaji": 17000000},
... {"Nama": "Andi", "Usia": 28, "Kota": "Bandung", "Gaji": 25000000}
... ])
--> if single data, [] not used

update data value in Collections
- update all --> db.Employee.update({}, {$set: {"Dept": "Data"})
- update per item --> db.Employee.update({"Nama": "Mike"}, {$set: {"Usia": 25} })

update data key in Collections
- update all --> db.Employee.updateMany({}, {$set: {"Dept": "Data"}})
	     --> db.Employee.updateMany({}, {$rename: {"Dept": "Divisi"}})
- update per item --> db.Employee.update({"Nama": "Mike"}, {$rename: {"Usia": "Umur"}})

update data based on certain query
- db.Employee.updateMany({'Nama': 'Rosi'}, {$rename: {"Usia": "Umur"}}

remove data
-  db.Aset.remove({"nama": "brankas"})db.

remove data key and value
- db.Employee.update({"Nama": "Mike"}, {$unset: {"Umur": true}})

import new data
- C:\Program Files\MongoDB\Tools\100\bin>mongoimport --db Culinary --collection restaurants --file restaurants.json
- make sure the .json file is copied to the directory

create user
1. go to one of db and collection
2. > db.createUser({
... 'user': 'AdministratorDB',
... 'pwd': 'Admin123',
... 'roles': ['dbAdmin', 'readWrite']
... })

3. show users or db.getUsers to show the information


MongoDB exercise: 
1) https://www.w3resource.com/mongodb-exercises/

2) versi >4.4 install mongodb tools (https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools)

3) masuk ke hasil instalasi (C:\Program Files\MongoDB\Tools\100\bin>mongoimport --db NamaDBS --collection DataRESTO --file restaurants.json
{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}


MySQL
Client - 3 alternatif
1. melalui GUI
2. melalui mySQL command line client
3. melalui command prompt

--> melalui command prompt
	- cd C:\Program Files\MySQL\MySQL Server 8.0\bin
	- --> mysql -u damianus -p

Reconnect localhost
1. Win+R
2. run services.msc
3. find MySQL 80 
4. click start


FINAL PROJECT:
1. Problem
2. Goals
3. Perusahaan - user
4. Data
5. Past Projects
	- Credit Scoring - SBA Loan Default Prediction
	- Sentiment Analysis - Twitter
	- Income Prediction
	- New Credit Card Application Prediction
	- Employee Turn-Over
	- Salary Prediction - NBA Salary Prediction
	- Heart Disease Prediction
	- Restaurant Recommendation


EVALUATION METRICS
- Linear Regression
	- persamaan garis y = ax + b
	- trend garis akan mendekati data prediksi jika a dan b
	  memiliki angka yang mendekati sempurna
	- kombinasi loss curve a dan b menghasilkan parabola 3D
	- untuk mencari a dan b, maka digunakan loss optimizer
	- ada dua jenis -> gradient & non-gradient descent

	- dengan teknik gradient descent, a dan b dapat dicari dengan
	  mencari titik paling rendah (menuruni bukit)
	- di linear regression, bukit cuma satu

- Polynomial Regression
	- menambahkan kuadrat untuk membuat garis/prediksi berlekuk
	- pangkat 1: lurus, pangkat 2: lengkung,
	  pangkat 3 dst: mulai berlekuk/bergelombang

- Bias-Variance Tradeoff
	- Bias = Loss = Error
	- Variance = variasi lekukan garis/prediksi
	- More complex model (high variance) ->prone to overfit (low bias)
	  More simple model(low variance) -> prone to underfit (high bias)
	- tidak ada yang high variance dan high bias dan
	  tidak ada yang low variance dan low bias
	  jika ada maka model itu sudah pasti salah dan 
	  lebih jelek dari nilai rata2
	- model yang ideal adalah medium variance dan medium bias




EDA 
-> EDA harus mengelaborasi data secara tuntas dan kompleks
-> Machine Learning tahap awal harus sesimple mungkin utk set benchmark

	step-step EDA
	1. import data
		- pd.read_csv('file_name', index_col=0/'column_name')
	2. overview info
		- df.describe() --> numeric stats
		- data_desc = desc(df)
	3. set the EDA using crosstab/pivot_table
		
	4. set the visualization based on EDA on no. 3
	- Histogram - matplotlib
	  - to see the data distribution - one variable
	  -----------------------
	  plt.style.use('seaborn')
	  fig = plt.figure(figsize=(8,6))
	  ax = plt.axes()

	  ax.hist(df.price)
	  ax.set_title('Distribution of Price')
	  ax.set_xlabel('price')
	  ax.set_ylabel('frequency')

	  plt.show()
	  -----------------------

	- Histogram - seaborn
	  #######################
	  sns.distplot(data_perfume_moist.price)
	  plt.title('Distribution of Price for Perfume & Moisturizers')

	  plt.xlabel('price')
	  plt.ylabel('frequency')

	  plt.show()
	  #######################

	- Piechart - matplotlib
	  - to find the categorization
	  =======================
	  1) grouping
	     price_by_price_category = data_perfume_moist[[
		'price', 
		'price_category']].groupby(['price_category'], 
		as_index=False).count()
	      
	     price_by_price_category

	  2) create pie chart
	     # Pie Chart
	     fig = plt.figure(figsize=(9,7))
	     ax = plt.axes()

	     # data
	     ax.pie(price_by_price_category['price'], 
		labels = price_by_price_category['price_category'], 
		explode = (0, 0.05, 0.05, 0.4, 0, 0))

	     # data label
	     ax.set_title('Price Category: Perfume & Moisturizer', size=16)
	     ax.axis('equal')

	     # show
	     plt.show()
	 =======================
	
	- Scatterplot - matplotlib
	  - to find pattern and correlation
	 #######################
	    # figure & axis
	    fig = plt.figure(figsize=(8,6))
	    ax = plt.axes()

	    # data
	    total_bill = tips['total_bill']
	    tip = tips['tip']

  	    ax.scatter(total_bill, tip)

       	    # data label
	    plt.title('Scatter Plot: Total Bill vs Tip', size=15)
	    plt.xlabel('Total Bill')
	    plt.ylabel('Tip')

	    # show
	    plt.show()
	#######################

	- Boxplot - seaborn
	  - to compare the data distribution
	  sns.boxplot(data=df, x='brand', y='price')

	- Barplot - matplotlib
	***********************
	 1) group first
	  review_by_category = df_top_5[df_top_5.brand=='tarte'][['number_of_reviews', 'category']].groupby(['category'], as_index=True).sum()
	  # review_by_category

	 2) visualize
	  # figure & axis
	  fig = plt.figure(figsize=(8,6))
 	  ax = plt.axes()

 	  # data
	  category = df_top_5[df_top_5.brand=='tarte']['category'].unique().tolist()
	  number_of_reviews = review_by_category['number_of_reviews']

	  ax.barh(category, number_of_reviews)

	  # data label
	  plt.title('Review based on Category', size=15)
	  plt.xlabel('Number of Reviews')
	  plt.ylabel('Category')

	  # show
	  plt.show()
	***********************


PLOTLY
# Boxplot with plotly
# if filtered used data = df_top_5[df_top_5.brand=='tarte']
fig = px.box(df_top_5, x='brand', y='price')
fig.show()


# Barplot with plotly
data = df_top_5[df_top_5.brand=='tarte']
fig = px.bar(data, x='category', y='number_of_reviews')
fig.show()


# Scatterplot with plotly
data = df_top_5[df_top_5.brand=='tarte']
fig = px.scatter(data, x='price', y='number_of_reviews')
fig.show()


==> appendix
= def desc(df):
    dataDesc = []

    for i in df.columns:
        dataDesc.append([
            i,
            df[i].dtypes,
            df[i].isna().sum(),
            round((((df[i].isna().sum()) / len(df)) * 100), 2),
            df[i].nunique(),
            df[i].drop_duplicates().sample(2).values
        ])

    description = pd.DataFrame(dataDesc, columns=[
        'Data Feature',
        'Data Types',
        'Null',
        'Null Percentage',
        'Unique',
        'Unique Sample'
    ])

    return description







FINAL PROJECTS
1. Statistics

- Standard Deviation - untuk menunjukkan keragaman data
- Variance -> pangkat 2 dari standard deviation
- Mean, Median, Quartile formula
  - quartile -> pertama tahu nilai tengah dulu (median) setelah diurutkan
	- 
- Boxplot -> 1.5 IQR
	- model2 boxplot
	- IQR: Q3-Q1 (nilai tengah antara median dan nilai maksimum)

- Correlation - mengetahui hubungan dari dua variable.
  1. korelasi range nya antara -1 sampai 1, korelasi itu kuat
     (mendekati 1/-1) dan lemah (mendekati 0)
  2. korelasi positif mendekati 1, korelasi negatif mendekati -1
- korelasi ada - Pearson dan Spearman

2. Business understanding & Machine learning

3. Final Projects Concept
	- Vitamin - to boost the performance - to improve/optimize
	- Medicine - to cure the illness - to solve problem
4. Modul 2's question
	- beda std numpy dan pandas
	- fungsi pandas yang penting ekstraksi, subsetting, groupby




ini untuk Plot2 yang tadi, sama gambaran jawaban dari yang flask
From Karina Anggraeni to Everyone:  03:17 PM
Mas, mau make sure aja, jadi materi yg diujikan itu mirip dengan soal Sephora yg minggu lalu ya Mas? Kalau materi flask itu optional aja ya?
From hafizhan afif to Everyone:  03:35 PM
materi yang flask API belum masuk sih kalo saya lihat ya
yg masuk itu yang dashboard dulu
karena disini fokusnya visualisasi data / data Exploration / EDA Process
From Advendio Desandros to Everyone:  03:35 PM
berarti harus pake plotly ya mas?
From hafizhan afif to Everyone:  03:36 PM
iyah kalo untuk dashboard web (using flask)
From Advendio Desandros to Everyone:  03:38 PM
cantik atau enggaknya dashboard pengaruh ke nilai ga mas? Soalnya pake plotly lumayan ribet setelah diliat2
From hafizhan afif to Everyone:  03:39 PM
enggak
From Advendio Desandros to Everyone:  03:39 PM
Hoo oke, thanks mas
From hafizhan afif to Everyone:  03:39 PM
yang baik visualisasi itu yang bisa dibaca/ dimengerti sama yg liat
From Karina Anggraeni to Everyone:  03:39 PM
Oke makasih Mas
From hafizhan afif to Everyone:  03:40 PM
sama mungkin ditambahin deskripsi di bawhanya, biar pembaca ga bingung jg
(interpretasi dari dasboardnya)
eh dari plot nya mksdnya

	
